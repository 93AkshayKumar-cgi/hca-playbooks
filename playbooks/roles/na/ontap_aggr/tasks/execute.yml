---

-  name: "BLOCKnRESCUE: ONTAP_AGGR"
   block:
      -  set_fact:
            service_start_time: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"

      -  name: 'proviision aggr'
         netapp.ontap.na_ontap_aggregate:
            hostname:            "{{ clusters[loop_arg['hostname']]['mgmt_ip'] }}"
            username:            "{{ clusters[loop_arg['hostname']]['username'] }}"
            password:            "{{ clusters[loop_arg['hostname']]['password'] }}"
            
            cert_filepath:       "{{ loop_arg['cert_filepath']                | default(omit) }}"
            feature_flags:       "{{ loop_arg['feature_flags']                | default(omit) }}"
            http_port:           "{{ loop_arg['http_port']                    | default(omit) }}"
            https:               "{{ loop_arg['https']                        | default('true') }}"
            ontapi:              "{{ loop_arg['ontapi']                       | default(omit) }}"
            key_filepath:        "{{ loop_arg['key_filepath']                 | default(omit) }}"
            use_rest:            "{{ loop_arg['use_rest']                     | default(omit) }}"
            validate_certs:      "{{ loop_arg['validate_certs']               | default('false') }}"

            name:                "{{ loop_arg['name'] }}"
            state:               "{{ loop_arg['state']                        | default('present') }}"
            disk_count:          "{{ loop_arg['disk_count']                   | default(omit) }}"
            disk_size:           "{{ loop_arg['disk_size']                    | default(omit) }}"
            disk_type:           "{{ loop_arg['disk_type']                    | default(omit) }}"
            disks:               "{{ loop_arg['disks']                        | default(omit) }}"
            mirror_disks:        "{{ loop_arg['mirror_disks']                 | default(omit) }}"
            from_name:           "{{ loop_arg['from_name']                    | default(omit) }}"
            is_mirrored:         "{{ loop_arg['is_mirrored']                  | default(omit) }}"
            nodes:               "{{ loop_arg['nodes']                        | default(omit) }}"
            raid_size:           "{{ loop_arg['raid_size']                    | default(omit) }}"
            raid_type:           "{{ loop_arg['raid_type']                    | default(omit) }}"
            service_state:       "{{ loop_arg['service_state']                | default(omit) }}"
            time_out:            "{{ loop_arg['time_out']                     | default(omit) }}"
            unmount_volumes:     "{{ loop_arg['unmount_volumes']              | default(omit) }}"
            wait_for_online:     "{{ loop_arg['wait_for_online']              | default(omit) }}"
            disk_size_with_unit: "{{ loop_arg['disk_size_with_unit']          | default(omit) }}" 
            ignore_pool_checks:  "{{ loop_arg['ignore_pool_checks']           | default(omit) }}" 
            object_store_name:   "{{ loop_arg['object_store_name']            | default(omit) }}" 
            snaplock_type:       "{{ loop_arg['snaplock_type']                | default(omit) }}" 
            spare_pool:          "{{ loop_arg['spare_pool']                   | default(omit) }}" 
             
         loop:    "{{ args }}"
         loop_control:
            loop_var:   loop_arg
         register:   role_result

   rescue:
      -  name: Set Play Status
         set_fact:
            playbook_status:   "failed"

   always:
      -  name: add log msg
         vars:
            role_log:
               role: "ONTAP_AGGR"
               timestamp:
                  start_time: "{{service_start_time}}"
                  end_time: "{{ lookup('pipe', 'date +%Y-%m-%d@%H:%M:%S') }}"
               service_status: "{{ playbook_status }}"
               result: "{{role_result}}"   
         set_fact:
            global_log_msgs:   "{{ global_log_msgs + [ role_log ] }}" 
