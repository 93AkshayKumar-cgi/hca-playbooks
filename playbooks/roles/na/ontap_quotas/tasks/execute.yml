---

-  name: "BLOCKnRESCUE: ONTAP_QUOTAS"
   block:
      -  set_fact:
            service_start_time: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"

      -  name: "execute ontap_quotas"
         netapp.ontap.na_ontap_quotas:
            hostname:            "{{ clusters[loop_arg['hostname']]['mgmt_ip'] }}"
            username:            "{{ clusters[loop_arg['hostname']]['username'] }}"
            password:            "{{ clusters[loop_arg['hostname']]['password'] }}"

            cert_filepath:       "{{ loop_arg['cert_filepath']                | default(omit) }}"
            feature_flags:       "{{ loop_arg['feature_flags']                | default(omit) }}"
            http_port:           "{{ loop_arg['http_port']                    | default(omit) }}"
            https:               "{{ loop_arg['https']                        | default('true') }}"
            key_filepath:        "{{ loop_arg['key_filepath']                 | default(omit) }}"
            ontapi:              "{{ loop_arg['ontapi']                       | default(omit) }}"
            use_rest:            "{{ loop_arg['use_rest']                     | default(omit) }}"
            validate_certs:      "{{ loop_arg['validate_certs']               | default('false') }}"
         
            volume:              "{{ loop_arg['volume'] }}"
            vserver:             "{{ loop_arg['vserver'] }}"
            quota_target:        "{{ loop_arg['quota_target'] }}"
            type:                "{{ loop_arg['type'] }}"
            state:               "{{ loop_arg['state']                        | default('present') }}"
            disk_limit:          "{{ loop_arg['disk_limit']                   | default(omit) }}"
            file_limit:          "{{ loop_arg['file_limit']                   | default(omit) }}"
            policy:              "{{ loop_arg['policy']                       | default(omit) }}"
            qtree:               "{{ loop_arg['qtree']                        | default(omit) }}"
            set_quota_status:    "{{ loop_arg['set_quota_status']             | default(omit) }}"
            threshold:           "{{ loop_arg['threshold']                    | default(omit) }}"
            soft_disk_limit:     "{{ loop_arg['soft_disk_limit']              | default(omit) }}"
            soft_file_limit:     "{{ loop_arg['soft_file_limit']              | default(omit) }}"

         loop:    "{{ args }}"
         loop_control:
            loop_var:   loop_arg
         register:      role_result
      
      #   Build a dictionary of vservers, volumes hostnames(cluster names) to run quota commands against.
      -  set_fact:
            vol_data:   "{{vol_data + [{ 'volume':item['volume'],'vserver': item['vserver'], 'hostname': item['hostname'] } ] }}"
         loop: "{{ args }}" 
      
      #  Remove duplicate vservers, volumes and hostnames to the quota command is only ran once per vserver:vol combo.
      #  to prevent duplicate volume exercises where a volume have multiple quotas being defined.`  
      -  set_fact:
            vol_list:   "{{vol_data | unique}}"

      -  name: "execute ontap_quota_policy command"
         netapp.ontap.na_ontap_command:
            hostname:            "{{ clusters[item.0['hostname']]['mgmt_ip'] }}"
            username:            "{{ clusters[item.0['hostname']]['username'] }}"
            password:            "{{ clusters[item.0['hostname']]['password'] }}"
            https:            true
            validate_certs:   false
            command:
               - "quota"
               -  "{{ item.1 }}"
               - "-volume"
               - "{{ item.0['volume']}}"
               - "-vserver"
               - "{{ item.0['vserver'] }}"  
   
         with_nested: 
            -  "{{vol_list}}"
            -  ["off", "on"]
         register:      command_result
        
   rescue:
      -  name: Set Play Status
         set_fact:
            playbook_status:   "failed"

   always:
      -  name: add log msg
         vars:
            role_log:
               role: "ONTAP_QUOTAS"
               timestamp:
                  start_time: "{{service_start_time}}"
                  end_time: "{{ lookup('pipe', 'date +%Y-%m-%d@%H:%M:%S') }}"
               service_status: "{{ playbook_status }}"
               result: "{{role_result}}"   
         set_fact:
            global_log_msgs:   "{{ global_log_msgs + [ role_log ] }}" 
